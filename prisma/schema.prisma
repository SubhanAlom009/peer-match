generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  //onboarding details 
  year         String?
  college      String?
  skills       String[]
  availability String?
  linkedinURL  String?
  isOnboarded  Boolean  @default(false)

  accounts Account[]
  sessions Session[]

  // connections
  connections         Connection[] @relation("UserConnections")
  receivedConnections Connection[] @relation("UserReceivedConnections")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connection {
  id          String           @id @default(cuid())
  requesterId String
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester User @relation("UserConnections", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver  User @relation("UserReceivedConnections", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@map("connections")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}
